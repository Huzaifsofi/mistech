#include <stdio.h>

#include <string.h>



#define MAX 50



// Global variables

int top = -1;

int item;

char stack_string[MAX];



// function declaration

void pushChar(char item);

char popChar(void);

int isEmpty(void);

int isFull(void);





int main() {

    char str[MAX];

    

    int i;

    

    printf("Input a string: ");

    scanf("%[^\n]s",&str);

    

    for(i=0;i<strlen(str);i++) {

    	pushChar(str[i]);

	}

 

    for(i=0;i<strlen(str);i++) {

        str[i] = popChar();

	}

	

    printf("Reversed String is: %s\n",str);

    

    return 0;

}

 



void pushChar(char item) {

    if(top == MAX-1) {

        printf("\nStack is FULL !!!\n");

        return;

    }

    

    top = top + 1;

    stack_string[top] = item;

}

 



char popChar() {

    if(top == -1) {

        printf("\nStack is EMPTY!!!\n");

        return 0;

    }



    item = stack_string[top];

    top = top - 1;

    return item;

}






linked list


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>

struct node {
	int data;
	struct node *next;
}*head;


void create(int data) {

	struct node *q,*temp;
	temp=(struct node *)malloc(sizeof(struct node));
	temp->data=data;
	temp->next=NULL;
	if(head==NULL)	{
		head=temp;
	}
	else {
		q=head;
		while(q->next!=NULL) {
			q=q->next;
		}
		q->next=temp;
	}
}


// 2. Display

void display() {
	struct node *q;
	if(head==NULL) {
		printf("\nLIST IS EMPTY");
	}
	else {
		q=head;
		while(q!=NULL) {
			printf("%d->",q->data);
			q=q->next;
		}
		printf("NULL");
	}
}






int main() {

	int ch,n,i,m,a,pos;

	head=NULL;
	do {
		printf("MENU");

		printf("\n1.Create");

		printf("\n2.Display");

		printf("\n3.Exit");

		printf("\n\nEnter your choice: ");

		scanf("%d",&ch);
		switch(ch) {
			case 1:	printf("\n\nHow many nodes do you want to create? ");
					scanf("%d",&n);
					for(i=0;i<n;i++) {
						printf("\nEnter the data: ");
						scanf("%d",&m);
						create(m);
					}
					break;

			case 2: display();
					break;

					
			
			case 3: exit(0);
		}

	} while(ch!=7);
	getch();
	return 0;
}



angular


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body ng-app="myApp" ng-controller="empCtrl">
    <script>
        var app = angular.module("myApp", []);
        app.controller('empCtrl', ['$scope', function ($scope) {
        $scope.showEmployee = function () {
        $scope.emp = [
        { name: 'pintu patil', city: 'Pune',salary:'50000' },
        { name: 'immo', city: 'Delhi',salary:'60000' },
        { name: 'shabooo', city: 'Mumbai',salary:'70000' },
        { name: 'rashu', city: 'Pune',salary:'80000'},
        ];
        }
        }]);
    </script>

    <form>
        <div ng-controller="empCtrl">
        List of employees order by salary<br>
        <table border="2">
        <tr ng-repeat="x in emp| orderBy:'salary'">
        <td>{{x.name}}</td>
        <td>
        {{x.city}}
        </td>
        <td>{{x.salary}}</td>
        </tr>
        </table>
        </div>
        <br>
        <br>
        <br>
        <br>
        </div>
        <input type="button" ng-click="showEmployee()" value="Click Here">
        </button>
    </form>
</body>
</html>



r programming


plot.new()
plot(1,type="n",xlab="",ylab="",xlim=c(0,20),ylim=c(0,20))



